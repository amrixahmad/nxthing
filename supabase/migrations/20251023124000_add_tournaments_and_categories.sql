-- Enums
create type tournament_status as enum ('draft','registration_open','upcoming','active','completed','cancelled');
create type participation_type as enum ('singles','doubles','team');
create type tournament_format as enum ('single_elimination','double_elimination','round_robin');

-- Tournaments table
create table if not exists public.tournaments (
  id bigint generated by default as identity primary key,
  organizer_id uuid not null references public.profiles(id),
  title text not null,
  description text,
  banner_url text,
  venue_name text,
  start_date timestamptz not null,
  end_date timestamptz,
  registration_start_date timestamptz not null,
  registration_end_date timestamptz not null,
  status tournament_status not null default 'draft',
  terms_and_conditions text,
  format tournament_format,
  created_at timestamptz default now()
);

-- Tournament categories table
create table if not exists public.tournament_categories (
  id bigint generated by default as identity primary key,
  tournament_id bigint not null references public.tournaments(id) on delete cascade,
  name text not null,
  participation_type participation_type not null,
  min_age int,
  max_age int,
  gender_restriction text,
  min_skill_level numeric(3,2),
  max_skill_level numeric(3,2),
  max_teams int,
  members_per_team_min int default 1,
  members_per_team_max int default 1,
  registration_fee numeric(10,2) not null
);

-- Indexes
create index if not exists tournaments_organizer_idx on public.tournaments(organizer_id);
create index if not exists tournament_categories_tournament_idx on public.tournament_categories(tournament_id);

-- RLS
alter table public.tournaments enable row level security;
alter table public.tournament_categories enable row level security;

-- Public read access (listing)
drop policy if exists "Tournaments are readable by everyone" on public.tournaments;
create policy "Tournaments are readable by everyone" on public.tournaments
  for select using (true);
drop policy if exists "Tournament categories are readable by everyone" on public.tournament_categories;
create policy "Tournament categories are readable by everyone" on public.tournament_categories
  for select using (true);

-- Organizer can insert/update/delete own tournaments
drop policy if exists "Organizers can insert own tournaments" on public.tournaments;
create policy "Organizers can insert own tournaments" on public.tournaments
  for insert with check (auth.uid() = organizer_id);
drop policy if exists "Organizers can update own tournaments" on public.tournaments;
create policy "Organizers can update own tournaments" on public.tournaments
  for update using (auth.uid() = organizer_id);
drop policy if exists "Organizers can delete own tournaments" on public.tournaments;
create policy "Organizers can delete own tournaments" on public.tournaments
  for delete using (auth.uid() = organizer_id);

-- Organizer can manage categories of their tournaments
drop policy if exists "Organizers can insert categories for their tournaments" on public.tournament_categories;
create policy "Organizers can insert categories for their tournaments" on public.tournament_categories
  for insert with check (exists (
    select 1 from public.tournaments t where t.id = tournament_id and t.organizer_id = auth.uid()
  ));
drop policy if exists "Organizers can update categories for their tournaments" on public.tournament_categories;
create policy "Organizers can update categories for their tournaments" on public.tournament_categories
  for update using (exists (
    select 1 from public.tournaments t where t.id = tournament_id and t.organizer_id = auth.uid()
  ));
drop policy if exists "Organizers can delete categories for their tournaments" on public.tournament_categories;
create policy "Organizers can delete categories for their tournaments" on public.tournament_categories
  for delete using (exists (
    select 1 from public.tournaments t where t.id = tournament_id and t.organizer_id = auth.uid()
  ));
